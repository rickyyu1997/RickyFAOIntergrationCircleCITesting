service: frankandoak-netsuite-returns-injection

plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: false

package:
  exclude:
    - ./**
  include:
    - netsuite_returns_injection/**

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'x'}
  tenant: frankandoak
  region: us-east-1
  deploymentBucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz-deploy
  configBucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz
  role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
  environment:
    STAGE: ${self:provider.stage}
    TENANT: ${self:provider.tenant}
    REGION: ${self:provider.region}
    SQS_QUEUE: ${self:provider.tenant}-returns-to-netsuite-queue.fifo
    MAX_MESSAGE_QUEUE_SIZE: 25

functions:
  returns:
    name: ${self:provider.tenant}-returns-to-netsuite
    handler: netsuite_returns_injection.aws.returns_to_netsuite.handler
    timeout: 300
    memorySize: 256
    environment:
      IGNORE_REFUND_PAYMENT_MISMATCHES: False
    events:
      - schedule:
          name: ${self:provider.tenant}-returns-to-netsuite-trigger
          rate: rate(10 minutes)

resources:
  Resources:
    InStoreReturnQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: True
        ContentBasedDeduplication: True
        VisibilityTimeout: 300
        QueueName: ${self:provider.tenant}-returns-to-netsuite-queue.fifo
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt InStoreReturnDeadLetterQueue.Arn
          maxReceiveCount: 3
    InStoreReturnDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: True
        ContentBasedDeduplication: True
        MessageRetentionPeriod: 1209600 # 14 days
        QueueName: ${self:provider.tenant}-returns-to-netsuite-dlq.fifo
