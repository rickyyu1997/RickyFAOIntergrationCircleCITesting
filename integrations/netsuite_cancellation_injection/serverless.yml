service: frankandoak-netsuite-cancellation-injection

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: false

package:
  exclude:
    - ./**
  include:
    - netsuite_cancellation_injection/**

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'x'}
  tenant: ${opt:tenant, 'frankandoak'}
  region: us-east-1
  deploymentBucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz-deploy
  configBucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz
  role: arn:aws:iam::#{AWS::AccountId}:role/LambdaExecutionRole
  environment:
    STAGE: ${self:provider.stage}
    TENANT: ${self:provider.tenant}
    SQS_QUEUE: ${self:provider.tenant}-cancellation-to-netsuite-queue.fifo
    MAX_MESSAGE_QUEUE_SIZE: 25

functions:
  cancellation:
    name: ${self:provider.tenant}-cancellation-to-netsuite
    handler: netsuite_cancellation_injection.aws.cancellation_to_netsuite.handler
    timeout: 300
    memorySize: 256
    events:
      - schedule:
          name: ${self:provider.tenant}-cancellation-to-netsuite-trigger
          rate: rate(5 minutes)

resources:
  Resources:
    CancellationQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: True
        ContentBasedDeduplication: True
        VisibilityTimeout: 300
        QueueName: ${self:provider.tenant}-cancellation-to-netsuite-queue.fifo
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt CancellationDeadLetterQueue.Arn
          maxReceiveCount: 3
    CancellationDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: True
        ContentBasedDeduplication: True
        MessageRetentionPeriod: 1209600 # 14 days
        QueueName: ${self:provider.tenant}-cancellation-to-netsuite-dlq.fifo
