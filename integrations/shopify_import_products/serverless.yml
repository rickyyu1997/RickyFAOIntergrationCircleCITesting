service: frankandoak-shopify-import-products

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'x'}
  tenant: frankandoak
  region: us-east-1
  deploymentBucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz-deploy
  configBucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz
  role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
  environment:
    STAGE: ${self:provider.stage}
    TENANT: ${self:provider.tenant}
    SHOPIFY_HOST: myshopify.com/admin
    SQS_INVENTORY_QUEUE_NAME: ${self:provider.tenant}-set-shopify-inventory-location.fifo
    SQS_INVENTORY_DLQ_NAME: ${self:provider.tenant}-set-shopify-inventory-location-dlq.fifo
    SHOP: storefront-catalog-en
    products_per_file: '25000'
    namespace_metafields: products
    is_full: 'false'
    email_port: '587'
    meta_name: initialisation repository
    s3_bucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz
    s3_bucket_key: import_files/
    url_api: ${self:provider.tenant}.${self:provider.stage}.newstore.net
    newstore_auth_lambda: ${self:provider.tenant}-auth-token-generator-${self:provider.stage}-get_auth_token
    newstore_url_api: ${self:provider.tenant}.${self:provider.stage}.newstore.net
    newstore_use_auth_lambda: 1
    meta_provider: ${self:provider.tenant}
    dynamo_table_name: ${self:provider.tenant}-import-products-savestate
    url_image_placeholder: 'https://s3.amazonaws.com/${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz/default_1.jpg'
    cron_expression_for_next_day: cron(0 7 * * ? *)
    trigger_name: shopify_import_products_trigger
    import_login: ''
    import_password: ''
    email_host: ''
    email_recipients: ''
    created_at_min: '2015-05-08'

functions:
  product_import:
    name: ${self:provider.tenant}-shopify-import-products
    handler: shopify_import_products.aws.main.handler
    timeout: 900
    memorySize: 1024
    events:
      - schedule:
          name: ${self:provider.environment.trigger_name}
          rate: cron(0 7 * * ? *)

resources:
  Resources:
    ProductImportSaveState:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:provider.environment.dynamo_table_name}
        BillingMode: PAY_PER_REQUEST

    InventoryLOCQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: True
        ContentBasedDeduplication: True
        VisibilityTimeout: 60
        QueueName: ${self:provider.environment.SQS_INVENTORY_QUEUE_NAME}
        RedrivePolicy:
          maxReceiveCount: 5
          deadLetterTargetArn:
            "Fn::GetAtt":
              - InventoryLOCDLQ
              - Arn

    InventoryLOCDLQ:
      Type: "AWS::SQS::Queue"
      Properties:
        FifoQueue: True
        ContentBasedDeduplication: True
        MessageRetentionPeriod: 1209600
        QueueName: ${self:provider.environment.SQS_INVENTORY_DLQ_NAME}
