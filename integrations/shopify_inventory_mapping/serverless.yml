service: frankandoak-shopify-inventory-mapping

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'x'}
  tenant: frankandoak
  region: us-east-1
  deploymentBucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz-deploy
  configBucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz
  role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
  environment:
    STAGE: ${self:provider.stage}
    TENANT: ${self:provider.tenant}
    REGION: ${self:provider.region}
    SHOPIFY_HOST: myshopify.com/admin
    s3_bucket: ${self:provider.tenant}-${self:provider.stage}-0-newstore-dmz
    s3_bucket_key: import_files/
    url_api: ${self:provider.tenant}.${self:provider.stage}.newstore.net
    newstore_auth_lambda: ${self:provider.tenant}-auth-token-generator-${self:provider.stage}-get_auth_token
    newstore_url_api: ${self:provider.tenant}.${self:provider.stage}.newstore.net
    newstore_use_auth_lambda: 1
    dynamo_table_name: ${self:provider.tenant}-import-products-savestate
    dynamo_mapping_table_name: ${self:provider.tenant}-product-inventory-mapping
    cron_expression_for_next_day: cron(0 7 * * ? *)
    trigger_name: shopify_import_inventory_mapping_trigger
    MAPPING_QUEUE_NAME: fao_sqs_inventory_mapping

functions:
  product_inventory_mapping:
    name: ${self:provider.tenant}-shopify-inventory-mapping
    handler: shopify_inventory_mapping.aws.main.handler
    timeout: 900
    memorySize: 1024
    events:
      - schedule:
          name: ${self:provider.environment.trigger_name}
          rate: cron(0 7 * * ? *)
  mapping_to_dynamodb:
    name: ${self:provider.tenant}-shopify-inventory-mapping-to-dynamodb
    handler: shopify_inventory_mapping.aws.import_to_dynamodb.handler
    timeout: 900
    memorySize: 512
    events:
      - schedule:
          name: shopify_inventory_mapping_to_dynamodb_trigger
          rate: rate(5 minutes)
          enable: true

resources:
  Resources:
    ImportMappingQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: fao_sqs_inventory_mapping
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn: !GetAtt ImportMappingDeadLetterQueue.Arn
    ImportMappingDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: fao_sqs_inventory_mapping-dlq
    ProductMappingTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: product_sku
            AttributeType: S
        KeySchema:
          - AttributeName: product_sku
            KeyType: HASH
        TableName: ${self:provider.environment.dynamo_mapping_table_name}
        BillingMode: PAY_PER_REQUEST
