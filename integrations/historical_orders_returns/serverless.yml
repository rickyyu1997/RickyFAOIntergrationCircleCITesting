service: ${self:custom.tenant}-historical-orders-returns
frameworkVersion: ^2.34.0
configValidationMode: error

plugins:
  - serverless-python-requirements

custom:
  tenant: ${opt:tenant, 'frankandoak'}
  pythonRequirements:
    dockerizePip: false

package:
  patterns:
    - '!./**'
    - historical_orders_returns/**

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'x'}
  region: us-east-1
  deploymentBucket: ${self:custom.tenant}-${self:provider.stage}-0-newstore-dmz-deploy
  role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole"
  environment:
    STAGE: ${self:provider.stage}
    TENANT: ${self:custom.tenant}
    REGION: ${self:provider.region}
    ORDERS_QUEUE_NAME: fao_sqs_historical_or_orders-${opt:stage, self:provider.stage}.fifo
    RETURNS_QUEUE_NAME: fao_sqs_historical_or_returns-${opt:stage, self:provider.stage}.fifo
    SECRET_NAME_NEWSTORE_API_USER: ${self:custom.tenant}-newstore-api-user
    LOG_LEVEL: "INFO"
    S3_BUCKET: ${self:custom.tenant}-${self:provider.stage}-0-newstore-dmz
    CSV_DELIMITER: ","
    ORDERS_TABLE_NAME: ${self:custom.tenant}_historical_orders-${opt:stage, self:provider.stage}
    RETURNS_TABLE_NAME: ${self:custom.tenant}_historical_returns-${opt:stage, self:provider.stage}
    newstore_url_api: ${self:custom.tenant}.${self:provider.stage}.newstore.net
    newstore_use_auth_lambda: 1
    newstore_auth_lambda: ${self:custom.tenant}-auth-token-generator-${self:provider.stage}-get_auth_token
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [HistoricalOrdersQueue, Arn]

functions:
  split_csv_orders:
    handler: historical_orders_returns.lambdas.split_csv_files.handler
    timeout: 600
    memorySize: 1024
    environment:
      S3_OUTPUT_LOCATION: "historical_orders/splitted/"
      CSV_ROW_LIMIT: 500
      CHECK_ROW_NAME: Name
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: "historical_orders/complete/"
            - suffix: .csv
          existing: true
  split_csv_returns:
    handler: historical_orders_returns.lambdas.split_csv_files.handler
    timeout: 600
    memorySize: 1024
    environment:
      S3_OUTPUT_LOCATION: "historical_returns/splitted/"
      CSV_ROW_LIMIT: 100
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: "historical_returns/complete/"
            - suffix: .csv
          existing: true
  order_csv_to_dynamodb:
    handler: historical_orders_returns.lambdas.csv_to_dynamodb.handler
    timeout: 600
    memorySize: 1024
    environment:
      TYPE: order
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: "historical_orders/splitted/"
            - suffix: .csv
          existing: true
  return_csv_to_dynamodb:
    handler: historical_orders_returns.lambdas.csv_to_dynamodb.handler
    timeout: 600
    memorySize: 1024
    environment:
      TYPE: return
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: "historical_returns/splitted/"
            - suffix: .csv
          existing: true
  order_dynamodb_to_sqs:
    handler: historical_orders_returns.lambdas.dynamodb_to_sqs.handler_orders
    timeout: 900
    memorySize: 1024
    environment:
      QUEUE_NAME: fao_sqs_historical_or_orders-${opt:stage, self:provider.stage}.fifo
    events:
      - schedule:
          name: ${self:custom.tenant}-historical-orders-order_dynamodb-to-sqs-trigger
          rate: rate(10 minutes)
  return_dynamodb_to_sqs:
    handler: historical_orders_returns.lambdas.dynamodb_to_sqs.handler_returns
    timeout: 900
    memorySize: 1024
    environment:
      QUEUE_NAME: fao_sqs_historical_or_returns-${opt:stage, self:provider.stage}.fifo
    events:
      - schedule:
          name: ${self:custom.tenant}-historical-orders-returns_dynamodb-to-sqs-trigger
          rate: rate(10 minutes)
  order_sqs_to_newstore:
    handler: historical_orders_returns.lambdas.sqs_to_newstore.handler
    timeout: 600
    memorySize: 256
    environment:
      QUEUE_NAME: fao_sqs_historical_or_orders-${opt:stage, self:provider.stage}.fifo
      TYPE: order
    events:
      - schedule:
          name: ${self:custom.tenant}-historical-orders-order-sqs-to-newstore-trigger
          rate: rate(10 minutes)
  return_sqs_to_newstore:
    handler: historical_orders_returns.lambdas.sqs_to_newstore.handler
    timeout: 600
    memorySize: 256
    environment:
      QUEUE_NAME: fao_sqs_historical_or_returns-${opt:stage, self:provider.stage}.fifo
      TYPE: return
    events:
      - schedule:
          name: ${self:custom.tenant}-historical-orders-ret-sqs-to-newstore-trigger
          rate: rate(10 minutes)

resources:
  Resources:
    HistoricalOrdersQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: fao_sqs_historical_or_orders-${opt:stage, self:provider.stage}.fifo
        FifoQueue: true
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn:
            "Fn::GetAtt":
              - HistoricalOrdersQueueDL
              - Arn
    HistoricalOrdersQueueDL:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: fao_sqs_historical_or_orders-${opt:stage, self:provider.stage}-dl.fifo
        FifoQueue: true
    HistoricalOrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tenant}_historical_orders-${opt:stage, self:provider.stage}
        AttributeDefinitions:
          - AttributeName: order_id
            AttributeType: S
        KeySchema:
          - AttributeName: order_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: True
    HistoricalReturnsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: fao_sqs_historical_or_returns-${opt:stage, self:provider.stage}.fifo
        FifoQueue: true
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn:
            "Fn::GetAtt":
              - HistoricalReturnsQueueDL
              - Arn
    HistoricalReturnsQueueDL:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: fao_sqs_historical_or_returns-${opt:stage, self:provider.stage}-dl.fifo
        FifoQueue: true
    HistoricalReturnsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tenant}_historical_returns-${opt:stage, self:provider.stage}
        AttributeDefinitions:
          - AttributeName: rma_id
            AttributeType: S
        KeySchema:
          - AttributeName: rma_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: True
